== Performance optimisation ideas ==
* Checking for duplicate rows and columns is slow, so defer it until the grid is almost full.
* Better intra-row and intra-column solving.
** For example, cases like this: 00101---, which must be 00101--1.
** An approach: try a recursive solve on the row or column. If there are no solutions with a cell set to a given value, that cell must have the opposite value.
*** :( - seems expensive. Up to O(n*2^n) grids to test.
** Another approach: as above, but only when the row or column is full enough. When solving as a human, some cases only appear when there is only one slot left for a given value, like in this example: 00101---.
* Try solving cells in a different order (currently the recursive solve is just left to right, top to bottom)
** Rationale: some cells are being solved repeatedly. The solver will guess a value upstream, solve square x, backtrack, guess a new value upstream, solve square x again. As a human I tend to solve as many easy squares as I can first.
** To try: guess values for the fullest columns and rows first.
* 2DArray.prototype.get and .set calculate x + y * width to find the correct slot for the cell in the array. Is this slow?
** Try a nested 2D array.
** Try rewriting some loops to use cellIndex += width or similar.

== New features ==
* Prettier display
* Make a performance test suite that runs a few grids automatically and prints their run times.
* Generate puzzles
* Get puzzles from www.binarypuzzle.com