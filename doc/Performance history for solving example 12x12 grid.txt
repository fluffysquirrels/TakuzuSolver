=== Baseline ===
solveGrid: 24731.000ms
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

=== After moving grid null value into variable ===
solveGrid: 26374.000ms main.js:91
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

=== Set cloned array contents with for loop instead of allocating a new array and then calling oldArray.slice(0) ===
Rejecting this, because it's slower.

solveGrid: 27785.000ms main.js:91
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

=== Grid.emptyCell is an integer (255) instead of null ===
solveGrid: 18649.000ms main.js:91
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771} 

=== Grid stores data in Uint8Array ===
Rejecting this as same performance as above.

solveGrid: 18700.000ms main.js:91
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

=== Remove temp variable in new Grid() ===
This surprised me.

solveGrid: 17705.000ms main.js:91
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

=== Comment out lines that increment perfStats counters ===
Seems like this doesn't make too much of a difference.

solveGrid: 17493.000ms main.js:91
Object {contradictionSearches: 0, contradictionSearchesPassed: 0, solveGridRecursiveCalls: 0} 

=== Use local variables instead of arrays to store per-row and per-column counts for 0s and 1s ===
solveGrid: 14070.000ms main.js:92
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771} 

=== Don't clone grids on the recursive step, use "dancing links" style backtracking instead ===
solveGrid: 10338.000ms main.js:92
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771}

This is already ~60% faster, with no changes that required rewriting more than a few lines of code.

=== Added new stat contradictionSearchReachedIdenticalRowColComparison ===
solveGrid: 10449.000ms main.js:92
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771, contradictionSearchReachedIdenticalRowColComparison: 583032}

=== Prep for smaller contradiction searches: extract per-row and per-column contradiction functions. Minimal performance difference. ===
solveGrid: 10843.000ms main.js:99
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771, contradictionSearchReachedIdenticalRowColComparison: 583032}

=== Change streakValue variable to be an int in 3 in a row contradiction tests ===
solveGrid: 8224.000ms main.js:99
Object {contradictionSearches: 1164771, contradictionSearchesPassed: 582386, solveGridRecursiveCalls: 1164771, contradictionSearchReachedIdenticalRowColComparison: 583032}

=== Basic intra-row and intra-column contradiction checks only run on the dirty grid row or column ===
This now runs quickly enough that my laptop CPU fan doesn't have time to come on!
solveGrid: 2828.000ms main.js:99
Object {contradictionSearches: 1164772, contradictionSearchesPassed: 582387, solveGridRecursiveCalls: 1164771, contradictionSearchReachedIdenticalRowColComparison: 583033}

=== Prep for smaller contradiction searches: extract inter-row and inter-column contradiction functions. Might be slightly faster. ===
solveGrid: 2764.000ms main.js:99
Object {contradictionSearches: 1164772, contradictionSearchesPassed: 582387, solveGridRecursiveCalls: 1164771, contradictionSearchReachedIdenticalRowColComparison: 583033}

=== Smaller contradiction searches: inter-row and inter-column contradiction checks only run on the dirty grid row or column ===
solveGrid: 1131.000ms main.js:99
Object {contradictionSearches: 1174822, contradictionSearchesPassed: 587412, solveGridRecursiveCalls: 1174821, contradictionSearchReachedIdenticalRowColComparison: 588595}

=== Solve some easy cases before recursive solve ===
solveGrid: 298.000ms main.js:100
Object {contradictionSearches: 341974, contradictionSearchesPassed: 170988, solveGridRecursiveCalls: 341973, contradictionSearchReachedIdenticalRowColComparison: 171423, easyCasesFilled: 24}

=== Switch back to functional recursive solve instead of dancing links style. Hurts performance for now, but will allow more easy case solving. ===
solveGrid: 428.000ms main.js:100
Object {contradictionSearches: 341974, contradictionSearchesPassed: 170988, solveGridRecursiveCalls: 341973, contradictionSearchReachedIdenticalRowColComparison: 171423, easyCasesFilled: 24}

=== Using fixed and improved solving code for easy cases. Now fills in easy cases recursively ===
solveGrid: 269.000ms main.js:100
Object {contradictionSearches: 156738, contradictionSearchesPassed: 108329, solveGridRecursiveCalls: 96819, contradictionSearchReachedIdenticalRowColComparison: 108757, easyCasesFilled: 59918}

=== Extracted some boiler plate from easy case solving code. No performance change. ===
solveGrid: 266.000ms main.js:100
Object {contradictionSearches: 156738, contradictionSearchesPassed: 108329, solveGridRecursiveCalls: 96819, contradictionSearchReachedIdenticalRowColComparison: 108757, easyCasesFilled: 59918}

=== Repeated run timing code. ===
Object {contradictionSearches: 156738, contradictionSearchesPassed: 108329, solveGridRecursiveCalls: 96819, contradictionSearchReachedIdenticalRowColComparison: 108757, easyCasesFilled: 59918} main.js:147
solveGrid 50 time(s): 12308.000ms main.js:43
Mean time is 246.16ms main.js:46

=== Solve more easy cases where rows and columns are like this: --0-0-- ===
Object {contradictionSearches: 44743, contradictionSearchesPassed: 32878, solveGridRecursiveCalls: 23731, contradictionSearchReachedIdenticalRowColComparison: 33158, easyCasesFilled: 21011} main.js:147
solveGrid 100 time(s): 8123.000ms main.js:43
Mean time is 81.23ms 